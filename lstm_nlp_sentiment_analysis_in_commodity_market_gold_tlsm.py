# -*- coding: utf-8 -*-
"""LSTM NLP Sentiment Analysis in Commodity Market Gold TLSM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cues6DpIdLfIcO2BbCosvzIweoned3jk
"""

import pandas as pd

# https://www.kaggle.com/datasets/ankurzing/sentiment-analysis-in-commodity-market-gold
df = pd.read_csv('gold-dataset-sinha-khandait.csv')

df.info()

df = df.drop(columns=['Dates', 'URL', 'Price Direction Up', 'Price Direction Constant', 'Price Direction Down', 'Asset Comparision', 'Past Information', 'Future Information'])

df['Price Sentiment'].value_counts()

sentiment = pd.get_dummies(df['Price Sentiment'])
df = pd.concat([df, sentiment], axis=1)
df = df.drop(columns=['Price Sentiment'])
df

import re

df['News'] = df['News'].map(lambda x: re.sub(r'\W+', ' ', x))
df['News'] = df['News'].map(lambda d: re.sub(r'\d+', '', d))
df

text = df['News'].values
label = df[['positive', 'negative', 'none', 'neutral']].values

from sklearn.model_selection import train_test_split

text_train, text_test, label_train, label_test = train_test_split(text, label, test_size=0.2, random_state=1)

from tensorflow.keras.preprocessing.text import Tokenizer

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(text_train)
tokenizer.fit_on_texts(text_test)

seq_train = tokenizer.texts_to_sequences(text_train)
seq_test = tokenizer.texts_to_sequences(text_test)

from tensorflow.keras.preprocessing.sequence import pad_sequences

padded_train = pad_sequences(seq_train)
padded_test = pad_sequences(seq_test)

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

num_epochs = 30

history = model.fit(
    padded_train,
    label_train,
    epochs=num_epochs,
    validation_data=(padded_test, label_test),
    verbose=2
)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

